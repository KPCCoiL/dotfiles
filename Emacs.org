#+TITLE: init.org
#+PROPERTY: header-args:emacs-lisp :tangle yes

* Initialization
** leaf.el
Packages are to be manages by =leaf.el=.
#+BEGIN_SRC emacs-lisp
  (eval-and-compile
    (customize-set-variable
     'package-archives '(("org" . "https://orgmode.org/elpa/")
			 ("melpa" . "https://melpa.org/packages/")
			 ("gnu" . "https://elpa.gnu.org/packages/")))
    (package-initialize)
    (unless (package-installed-p 'leaf)
      (package-refresh-contents)
      (package-install 'leaf))

    (leaf leaf-keywords
      :ensure t
      :init
      (leaf el-get :ensure t)
      :config
      ;; initialize leaf-keywords.el
      (leaf-keywords-init)))
      
  (leaf leaf-tree :ensure t)
  (leaf leaf-convert :ensure t)
#+END_SRC

** exec-path-from-shell
Perhaps this is a bad habit.
#+BEGIN_SRC emacs-lisp
  (leaf exec-path-from-shell
    :ensure t
    :config
    (exec-path-from-shell-initialize))
#+END_SRC

* Tiny utilities
Utilities for configurations.
#+BEGIN_SRC emacs-lisp
  (defconst +on-silvershield+ (string= (system-name) "SilverShield"))
#+END_SRC

* Evil
** evil
Be evil.
#+BEGIN_SRC emacs-lisp
  (leaf evil
    :ensure t
    :require t
    :after undo-tree
    :defvar (evil-want-integration
             evil-want-keybinding)
    :init
    (setf evil-want-integration t)
    (setf evil-want-keybinding nil)
    :global-minor-mode evil-mode
    :custom ((evil-want-Y-yank-to-eol . t)
             (evil-shift-width . 2)
             (evil-undo-system . 'undo-tree))
    :bind ((:evil-insert-state-map
            ("C-l" . evil-normal-state))
           (:evil-visual-state-map
            ("C-l" . evil-normal-state))
           (:evil-normal-state-map
            ("C-l" . nil))
           (:evil-motion-state-map
            ("j" . evil-next-visual-line)
            ("k" . evil-previous-visual-line)
            ("SPC" . nil)
            ("SPC -" . evil-window-split)
            ("SPC |" . evil-window-vsplit)
            ("SPC d f" . describe-function)
            ("SPC d v" . describe-variable)
            ("SPC d s" . describe-symbol)
            ("SPC d k" . describe-key)
            ("SPC d p" . describe-package)))
    :config
    (leaf evil-collection
      :ensure t
      :require t
      :config (evil-collection-init))
    (leaf evil-surround
      :ensure t
      :require t
      :global-minor-mode global-evil-surround-mode)
    (evil-define-command evil-tab-sensitive-quit (&optional bang)
      :repeat nil
      (interactive "<!>")
      (cond
        ((> (length (window-list)) 1) (delete-window))
        ((> (length (eyebrowse--get 'window-configs)) 1) (eyebrowse-close-window-config))
        (t (evil-quit bang))))
    (evil-define-command evil-tab-sensitive-wq (&optional bang)
      :repeat nil
      (interactive "<!>")
      (save-buffer)
      (evil-tab-sensitive-quit bang))
    (evil-ex-define-cmd "q[uit]" 'evil-tab-sensitive-quit)
    (evil-ex-define-cmd "wq" 'evil-tab-sensitive-wq))
#+END_SRC
** undo-tree
It's nice to have a time-machine.
#+BEGIN_SRC emacs-lisp
  (leaf undo-tree
      :ensure t
      :require t
      :global-minor-mode global-undo-tree-mode)
#+END_SRC
** eyebrowse
Let's have it behave like Vim's tabs.
#+BEGIN_SRC emacs-lisp
  (leaf eyebrowse
      :ensure t
      :require t
      :after evil
      :custom ((eyebrowse-wrap-around . t))
      :bind ((:evil-motion-state-map
	      :package evil
	      ("g t" . eyebrowse-next-window-config)
	      ("g T" . eyebrowse-prev-window-config)
	      ("SPC 0" . eyebrowse-switch-to-window-config-0)
	      ("SPC 1" . eyebrowse-switch-to-window-config-1)
	      ("SPC 2" . eyebrowse-switch-to-window-config-2)
	      ("SPC 3" . eyebrowse-switch-to-window-config-3)
	      ("SPC 4" . eyebrowse-switch-to-window-config-4)
	      ("SPC 5" . eyebrowse-switch-to-window-config-5)
	      ("SPC 6" . eyebrowse-switch-to-window-config-6)
	      ("SPC 7" . eyebrowse-switch-to-window-config-7)
	      ("SPC 8" . eyebrowse-switch-to-window-config-8)
	      ("SPC 9" . eyebrowse-switch-to-window-config-9)
	      ("SPC w" . eyebrowse-switch-to-window-config)
	      ("SPC W" . eyebrowse-create-window-config)
	      ("SPC C-w" . eyebrowse-create-named-window-config))
	     (:evil-normal-state-map
	       :package evil
	       ("g t" . eyebrowse-next-window-config)
	       ("g T" . eyebrowse-prev-window-config)))
      :global-minor-mode eyebrowse-mode
      :config
      (defun find-file-in-new-workspace (file)
	(interactive "Gfind file in tab: ")
	(eyebrowse-create-window-config)
	(find-file file))
      (evil-define-command evil-eyebrowse-tabedit (file)
			  :repeat nil
			  (interactive "<f>")
			  (find-file-in-new-workspace file))
      (evil-ex-define-cmd "tabnew" 'eyebrowse-create-window-config)
      (evil-ex-define-cmd "tabe[dit]" 'find-file-in-new-workspace))
#+END_SRC

* Visual stuffs
** color theme
#+BEGIN_SRC emacs-lisp
  (leaf gruvbox-theme
    :ensure t
    :config
    (load-theme 'gruvbox-dark-soft t))
#+END_SRC
** hide tool bar etc.
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (when +on-silvershield+
    (menu-bar-mode -1))
  (setf inhibit-startup-screen t)
#+END_SRC
** frame size
#+BEGIN_SRC emacs-lisp
  (setf default-frame-alist
        (pcase (system-name)
          ("StellarDagger" '((width . 125)
                             (height . 35)
                             (left . 200)
                             (top . 30)
                             (font . "Ricty Diminished Discord 14")))
          ("SilverShield" '((width . 125)
                            (height . 60)
                            (left . 500)
                            (top . 50)
                            (font . "Menlo 14")))))
#+END_SRC
* General utilities
** hydra
#+BEGIN_SRC emacs-lisp
  (leaf hydra
    :ensure t)
#+END_SRC
** ivy
#+BEGIN_SRC emacs-lisp
  (leaf counsel
    :ensure t
    :after evil
    :custom ((ivy-use-virtual-buffers . t)
             (ivy-count-format . "%d/%d "))
    :global-minor-mode ivy-mode
    :bind ((:evil-motion-state-map
            :package evil
            ("/" . swiper-isearch-save-direction)
            ("?" . swiper-isearch-backward-save-direction)
            ("SPC f" . counsel-find-file)
            ("SPC F" . counsel-dired-file)
            ("SPC b" . counsel-switch-buffer)
            ("SPC h" . counsel-recentf)))
    :config
    (leaf ivy-hydra
        :ensure t)
    (defun swiper-isearch-save-direction (&optional initial-input)
      "swiper-isearch which saves its direction to isearch-forward"
      (interactive)
      (swiper-isearch initial-input)
      (setf isearch-forward t))
    (defun swiper-isearch-backward-save-direction (&optional initial-input)
      "swiper-isearch-backward which saves its direction to isearch-forward"
      (interactive)
      (swiper-isearch-backward initial-input)
      (setf isearch-forward nil)))
#+END_SRC
** which-key
Emacs is too hard to live in without this.
#+BEGIN_SRC emacs-lisp
  (leaf which-key
      :ensure t
      :global-minor-mode which-key-mode)
#+END_SRC
** autorevert
#+BEGIN_SRC emacs-lisp
  (leaf autorevert
      :tag "builtin"
      :global-minor-mode global-auto-revert-mode)
#+END_SRC
** recentf
#+BEGIN_SRC emacs-lisp
  (leaf recentf
      :tag "builtin"
      :global-minor-mode recentf-mode)
#+END_SRC
** eshell
#+BEGIN_SRC emacs-lisp
  (leaf eshell
      :tag "builtin"
      :require em-alias
      :custom ((eshell-cmpl-ignore-case . t))
      :defun (new-shell-in-tab)
      :bind ((:evil-motion-state-map
              :package evil
              ("SPC t" . new-shell-in-tab)))
      :config
      (eshell/alias "ll" "ls -la $*")
      (eshell/alias "la" "ls -a $*")
      (eshell/alias "l" "ls -la $*")
      (eshell/alias "emacs" "find-file $1")
      (eshell/alias "tabedit" "evil-eyebrowse-tabedit $1")
      (defun new-shell (&optional start-directory)
        "Opens a fresh eshell."
        (interactive)
        (let ((start-dir (or start-directory default-directory))
              (shell-buffer (eshell 'N)))
          (with-current-buffer shell-buffer
            (eshell-return-to-prompt)
            (insert (concat "cd " start-dir))
            (eshell-send-input))))
      (defun new-shell-in-tab ()
        "Opens a fresh eshell in a new window config."
        (interactive)
        (let ((dir default-directory))
          (eyebrowse-create-window-config)
          (new-shell dir))))
#+END_SRC
** backups
#+BEGIN_SRC emacs-lisp
  (setf backup-directory-alist '(("." . "~/.emacs-backup")))
#+END_SRC
* General coding facilities
** lsp-mode
#+BEGIN_SRC emacs-lisp
  (leaf lsp-mode
    :ensure t
    :hook (((python-mode-hook c-mode-hook c++-mode-hook LaTeX-mode-hook haskell-mode-hook julia-mode-hook) . lsp)
           (lsp-mode-hook . lsp-enable-which-key-integration))
    :config
    (leaf lsp-ui
      :ensure t)
    (leaf lsp-latex
      :ensure t
      :require t
      :custom ((lsp-latex-build-on-save . t)))
    (leaf lsp-julia
        :ensure t))
#+END_SRC
** company
#+BEGIN_SRC emacs-lisp
  (leaf company
    :ensure t
    :custom ((company-idle-delay . 0))
    :global-minor-mode global-company-mode)
#+END_SRC
** flycheck
#+BEGIN_SRC emacs-lisp
  (leaf flycheck
      :ensure t
      :global-minor-mode global-flycheck-mode)
#+END_SRC
** yasnippet
#+BEGIN_SRC emacs-lisp
  (leaf yasnippet
      :ensure t
      :global-minor-mode yas-global-mode
      :bind ((:yas-minor-mode-map ("C-c y" . yas-expand)))
      :config
      (leaf yasnippet-snippets
          :ensure t))
#+END_SRC
** TODO magit
mysterious warning shows up.
#+BEGIN_SRC emacs-lisp
  (leaf magit
      :ensure t
      :bind ((:evil-motion-state-map
              :package evil
              ("SPC g" . magit-status))))
#+END_SRC
** vterm
#+BEGIN_SRC emacs-lisp
  (leaf vterm
      :ensure t
      :bind ((:evil-motion-state-map
              :package evil
              ("SPC r" . vterm-repl)))
      :config
      (defun vterm-repl (command)
        (interactive "sREPL command: ")
        (let ((vterm-shell command))
          (vterm))))
#+END_SRC
** parentheses
#+BEGIN_SRC emacs-lisp
  (leaf paren
      :tag "builtin"
      :custom ((show-paren-delay . 0))
      :global-minor-mode show-paren-mode)

  (leaf elec-pair
      :tag "builtin"
      :global-minor-mode electric-pair-mode)
#+END_SRC
** display-line-numbers
#+BEGIN_SRC emacs-lisp
  (leaf display-line-numbers
      :tag "builtin"
      :global-minor-mode global-display-line-numbers-mode)
#+END_SRC
** disable indent-tabs-mode
No tabs, please.
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC
* Language supports
How many of them do I use?
** Julia
As far as I tried so far =ob-julia-vterm= seems to be the best Julia-Babel integration package.
#+BEGIN_SRC emacs-lisp
  (leaf julia-mode
      :ensure t
      :config
      (leaf julia-vterm
          :ensure t
          :hook (julia-mode-hook . julia-vterm-mode))
      (leaf ob-julia-vterm
          :el-get (ob-julia-vterm
                   :url "https://github.com/shg/ob-julia-vterm.el.git")
          :after julia-vterm))
#+END_SRC
** Python
*** Python mode
#+BEGIN_SRC emacs-lisp
  (leaf python
      :tag "builtin"
      :custom ((python-shell-interpreter . "python3")))
#+END_SRC
*** Jupyter notebook
#+BEGIN_SRC emacs-lisp
  (leaf ein
      :ensure t
      :custom ((ein:output-area-inlined-images . t)))
#+END_SRC
** Lisps
*** paredit
#+BEGIN_SRC emacs-lisp
  (leaf paredit
      :ensure t
      :hook ((lisp-mode-hook
              emacs-lisp-mode-hook
              ielm-mode-hook
              hy-mode-hook
              scheme-mode-hook)
             . enable-paredit-mode))
#+END_SRC
*** Emacs Lisp
#+BEGIN_SRC emacs-lisp
  (setf lisp-indent-function 'common-lisp-indent-function)
#+END_SRC
*** Hy
#+BEGIN_SRC emacs-lisp
  (leaf hy-mode
      :ensure t
      :hook (hy-mode-hook . (lambda ()
                              (evil-local-set-key 'motion
                                                  "SPC i"
                                                  'hy-jedhy-update-imports))))
#+END_SRC
*** Common Lisp
sly from roswell.
#+BEGIN_SRC emacs-lisp
  (load (expand-file-name "~/.roswell/helper.el"))
#+END_SRC
*** Picolisp
#+BEGIN_SRC emacs-lisp
  (leaf plisp-mode
      :ensure t)
#+END_SRC
** Asymptote
#+BEGIN_SRC emacs-lisp
  (leaf asy-mode
      :if +on-silvershield+
      :load-path "/usr/local/texlive/2020/texmf-dist/asymptote/"
      :commands (asy-mode lasy-mode asy-insinuate-latex)
      :config
      (add-to-list 'auto-mode-alist '("\\.asy$" . asy-mode)))
#+END_SRC
** TODO gnuplot
There seems to be some problems.
I'll face it when the time comes.
#+BEGIN_SRC emacs-lisp
  (leaf gnuplot
      :ensure t
      :commands (gnuplot-mode gnuplot-make-buffer)
      :init
      (add-to-list 'auto-mode-alist '("\\.gp$" . gnuplot-mode)))
#+END_SRC
** LaTeX
#+BEGIN_SRC emacs-lisp
  (leaf auctex
      :ensure t
      :hook ((LaTeX-mode-hook . LaTeX-math-mode))
      :custom ((japanese-TeX-engine-default . 'luatex)
               (TeX-default-mode . 'japanese-latex-mode)
               (japanese-LaTeX-default-style . "ltjsarticle")))
#+END_SRC
** Haskell
#+BEGIN_SRC emacs-lisp
  (leaf haskell-mode
      :ensure t)
#+END_SRC
** Agda
In case I felt like.
#+BEGIN_SRC emacs-lisp
  (leaf agda2
      :require t
      :if +on-silvershield+
      :custom (agda2-backend . "GHC")
      :load-path `(,(let* ((coding-system-for-read 'utf-8))
                      (substring
                       (shell-command-to-string "agda-mode locate")
                       0
                       (- (length "/agda2.el")))))
      :hook (agda2-mode-hook . (lambda ()
                                 (setenv "GHC_ENVIRONMENT" "agda")
                                 (set-input-method "Agda"))))
#+END_SRC
* Org
Let's org'anize everything.
#+BEGIN_SRC emacs-lisp
  (leaf org
      :tag "builtin"
      :after yasnippet company
      :custom ((org-startup-truncated . nil)
               (org-startup-indented . t)
               (org-image-actual-width . 500)
               (org-latex-compiler . "lualatex")
               (org-latex-pdf-process . '("latexmk -output-directory=%o %f"))
               (org-latex-packages-alist . '(("" "luatexja-fontspec" nil '("lualatex"))))
               (org-latex-default-class . "ltjsarticle")
               (org-latex-prefer-user-labels . t)
               (org-babel-python-command . "python3")
               (org-ditaa-jar-path . "/usr/local/Cellar/ditaa/0.11.0_1/libexec/ditaa-0.11.0-standalone.jar")
               (org-confirm-babel-evaluate . nil)
               (org-format-latex-header . "\\documentclass[ja=standard]{bxjsarticle}
  \\usepackage[usenames]{color}
  [PACKAGES]
  [DEFAULT-PACKAGES]
  \\pagestyle{empty}             % do not remove
  \\usepackage{arev}
  % The settings below are copied from fullpage.sty
  \\setlength{\\textwidth}{\\paperwidth}
  \\addtolength{\\textwidth}{-3cm}
  \\setlength{\\oddsidemargin}{1.5cm}
  \\addtolength{\\oddsidemargin}{-2.54cm}
  \\setlength{\\evensidemargin}{\\oddsidemargin}
  \\setlength{\\textheight}{\\paperheight}
  \\addtolength{\\textheight}{-\\headheight}
  \\addtolength{\\textheight}{-\\headsep}
  \\addtolength{\\textheight}{-\\footskip}
  \\addtolength{\\textheight}{-3cm}
  \\setlength{\\topmargin}{1.5cm}
  \\addtolength{\\topmargin}{-2.54cm}")
               (org-format-latex-options . '(:foreground "White"
                                             :background default
                                             :scale 1.5
                                             :html-foreground "Black"
                                             :html-background "Transparent"
                                             :html-scale 1.0
                                             :matchers ("begin" "$1" "$" "$$" "\\(" "\\["))))
      :hook (org-mode-hook . (lambda ()
                               (set (make-local-variable 'company-backends) '((company-dabbrev company-yasnippet)))))
      :bind (:evil-motion-state-map
             :package evil
             ("SPC a" . org-agenda))
      :config
      (defvar org-config-executed t)
      (with-eval-after-load 'ox-latex
        (add-to-list 'org-latex-classes '("ltjsarticle" "\\documentclass[11pt]{ltjsarticle}"
                                          ("\\section{%s}" . "\\section*{%s}")
                                          ("\\subsection{%s}" . "\\subsection*{%s}")
                                          ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                                          ("\\paragraph{%s}" . "\\paragraph*{%s}")
                                          ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
      (add-to-list 'org-src-lang-modes '("Hy" . hy))
      (add-to-list 'org-babel-load-languages '(python . t))
      (add-to-list 'org-babel-load-languages '(gnuplot . t))
      (add-to-list 'org-babel-load-languages '(shell . t))
      (add-to-list 'org-babel-load-languages '(picolisp . t))
      (add-to-list 'org-babel-load-languages '(scheme . t))
      (add-to-list 'org-babel-load-languages '(julia-vterm . t))
                                          ;(add-to-list 'org-babel-load-languages '(julia . t))
      (add-to-list 'org-babel-load-languages '(ein . t))
      (add-to-list 'org-babel-load-languages '(asymptote . t))
      (org-babel-do-load-languages 'org-babel-load-languages '((python . t) (gnuplot . t) (shell . t) (picolisp . t)
                                                               (scheme . t) (julia-vterm . t) (ein . t) (asymptote . t)))
      (leaf ox-latex-subfigure
          :el-get (ox-latex-subfigure
                   :url "https://github.com/KPCCoiL/ox-latex-subfigure.git"
                   :branch "center-subfigure")
          :require t
          :after org)
      (leaf org-ref
          :ensure t
          :require t
          :after org
          :pre-setq (org-ref-completion-library . 'org-ref-ivy-cite)
          :custom ((reftex-default-bibliography . '("~/Documents/bibliography/references.bib"))
                   (org-ref-bibliography-notes . "~/Documents/bibliography/bibliography-notes.org")
                   (org-ref-pdf-directory . "~/Documents/bibliography/bibtex-pdfs"))))
#+END_SRC
* Miscellaneous utilities
** doc-view
#+BEGIN_SRC emacs-lisp
  (leaf doc-view
      :tag "builtin"
      :custom ((doc-view-ghostscript-program . "gs-noX11-Yosemite")
               (doc-view-continuous . t))
      :hook (doc-view-mode-hook . auto-revert-mode))
#+END_SRC
* others
** edit this file quickly
#+BEGIN_SRC emacs-lisp
  (defun edit-config ()
    "Edit Emacs.org."
    (interactive)
    (eyebrowse-create-window-config)
    (find-file "~/dotfiles/Emacs.org"))
#+END_SRC
** default-directory
On macOS, Emacs launched from , say, Dock, has ~default-directort~ ~/~.
#+BEGIN_SRC emacs-lisp
  (when (equal default-directory "/")
    (setf default-directory "~"))
#+END_SRC
** custom-file
Nobody wants their ~init.el~ messed up.
#+BEGIN_SRC emacs-lisp
  (setf custom-file "~/.emacs.d/custom.el")
  (load-file custom-file)
#+END_SRC
